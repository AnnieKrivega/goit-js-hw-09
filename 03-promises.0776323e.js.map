{"mappings":"gfAQAA,EAAA,aAEMC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAEQC,SAASN,EAAKO,SAASC,MAAMC,OAC9BH,SAASN,EAAKO,SAASG,KAAKD,OAC1BH,SAASN,EAAKO,SAASI,OAAOF,M","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event){\n  event.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\nconst validateInput = event => {\n  const target = event.target;\n  const inputValue = parseInt(target.value);\n\n  if ((target.name === 'step' || target.name === 'delay') && inputValue < 0) {\n    Notiflix.Notify.failure(\n      `❌ You cannot enter negative values in this field`\n    );\n    target.value = 0;\n  } else if (target.getAttribute('name') === 'amount' && inputValue <= 0) {\n    Notiflix.Notify.failure(\n      '❌ Only positive values can be entered in this field'\n    );\n    target.value = 1;\n  }\n};\nconst promiseGenerator = event => {\n  event.preventDefault();\n  const firstDelay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  for (let i = 0; i < amount; i++) {\n    const position = i;\n    const delay = firstDelay + (i - 1) * step;\n\n    createPromise(position, delay);\n  }\n};"],"names":["parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","parseInt","elements","delay","value","step","amount"],"version":3,"file":"03-promises.0776323e.js.map"}